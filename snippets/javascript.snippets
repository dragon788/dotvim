# Function
snippet fun
	function ${1:function_name}(${2}) {
		${3}
	}
# Anonymous Function
snippet f
	function(${1}){${2}}${3}
# if
snippet if
	if (${1}) {
	  ${2}
	}
# if ... else
snippet ife
	if (${1}) {
	  ${2}
	} else {
	  ${3}
	}
# tertiary conditional
snippet ter
	${1:condition} ? ${2:if true} : ${3:if false};
# switch
snippet switch
	switch(${1:expression}) {
		case ${3} :
			${4}
			break;
		${0}
		default:
			${2}
	}
# case
snippet case
	case ${1} :
		${2}
		break;
	${0}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4}
	}
# while (...) {...}
snippet while
	while (${1}) {
		${2}
	}
# do...while
snippet do
	do {
		${2}
	} while (${1});
# setTimeout function
snippet time
	setTimeout(function(){${2}}, ${1:10});
# Get Elements
snippet gett
	getElementsByTagName('${1}')${2}
# Get Element
snippet geti
	getElementById('${1}')${2}
# Add Events
snippet events
	if (typeof(document.addEventListener) !== 'undefined') {
		${1:element}.addEventListener('${2:event_name}', ${3:handler_name}, false);
	} else if (typeof(document.attachEvent) !== 'undefined') {
		$1.attachEvent('on' + '$2', $3);
	} else {
		$1.['on' + $2] = $3;
	}${4}
# Add Event
snippet adde
	addEventListener('${1:event_name}', ${2:function_name}, false);${3}
# Attach Event
snippet atte
	attachEvent('on' + '${1:event_name}', ${2:function_name});${3}
# Event handler
snippet handler
	function ${1:function_name}(e) {
		var e   = e || window.event;
		var src = e.target || e.srcElement;
		if (typeof e.stopPropagation === "function") {
			e.stopPropagation();
		}
		if (typeof e.cancelBubble !== "undefined") {
			e.cancelBubble = true;
		}
		if (typeof e.preventDefault === "function") {
			e.preventDefault();
		}
		if (typeof e.returnValue !== "undefined") {
			e.returnValue = false;
		}

		${2:// Do stuff with stuff}
	}
# Target
snippet targ
	var ${1:target} = ${2:event}.target || $2.srcElement;${3}
# Event
snippet ev
	var ${1:event} = ${2:ev} || window.event;${3}
#########
# ARRAY #
#########
# Array > Literal
snippet ar
	var ${1:array_name} = [
		${2}
	];
# Array > item
snippet arit
	${1:array_name}[${2:0}]${3}
##########
# OBJECT #
##########
# Object > Literal
snippet obj
	var ${1:object_name} = {
		${2}
	};
# Object > Property
snippet :
	${1:property_name} : ${2:value}
# Object > Method
snippet :f
	${1:method_name} : function(${2}) {
		${3}
	}
# JSON.parse
snippet jsonp
        JSON.parse(${0:jstr});
				# JSON.stringify
				snippet jsons
				        JSON.stringify(${0:object});
#########
# CLASS #
#########
# Class > Constructor
snippet cons
	var ${1:Constructor_name} = function(${2}) {
		var self = this;
		${3}
	};
# Class > Public Property
snippet =
	${1:this}.${2:public_property_name} = ${3};${4}
# Class > Privileged Method
snippet =f
	${1:this}.${2:privileged_method_name} = function(${3}) {
		${4}
	};
# Class > Public Method
snippet prot
	prototype.${1:method_name} = function(${2}) {
		${3}
	};
# Class > Inheritance
snippet herit
	${1:Child_name}.prototype = new ${2:Parent_name}();
	$1.prototype.constructor = $2;
# Class > New Instance
snippet new
	var ${1:instance_name} = new ${2:Constructor_name}(${3});${4}
# Console
snippet log
	console.log(${1});
# Try ... Catch
snippet try
	try {
		${1}
	}
	catch(e){$2}
# Document
snippet d
	document.
# Window
snippet w
	window.
# Module pattern
snippet mod
	var ${1:module_name} = (function(${2}) {
		// private properties
		// var property_name = value;

		// the exported object
		// var object = {};

		// public properties of the exported object
		// object.property_name = value;

		var $1 = {};
		${3}

		return $1;
	}());
# Getter
snippet get
	get${1:Property_name}: function() {
		return ${2:property_name}
	}
# Setter
snippet set
	set${1:Property_name}: function(${2:value}) {
		return (${3:property_name} = $2);
	}
# jquery stub
snippet ready
	$(document).ready(function() {
		${1}
	});
#
